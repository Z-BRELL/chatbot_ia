from flask import Flask, request 
from flask_session import Session
from flask_cors import CORS
import openai 
import os
import uuid
from datetime import datetime, timedelta
from twilio.twiml.messaging_response import MessagingResponse
from flask import Flask, request, jsonify
import mysql.connector
from flask import render_template

app = Flask(__name__) 
CORS(app)
openai.api_key = open("key.txt","r").read().strip('\n')

# Fonction pour ajouter une demande √† la base de donn√©es
def ajouter_DEMANDE(utilisateur, DEMANDE , phone_number):
    conn = mysql.connector.connect(
        host='localhost',
        user='root',
        password='',
        database='chatbot_db'      
    )               
    cursor = conn.cursor() 
    cursor.execute('INSERT INTO DEMANDE (incoming_msg, response_msg, phone_number) VALUES (%s, %s, %s)', (utilisateur, DEMANDE , phone_number))
    conn.commit()
    cursor.close()
    conn.close() 
    
# D√©finir la dur√©e d'expiration (par exemple, 5 minutes)
EXPIRATION_DUREE = timedelta(minutes=60)
def session_expiree(last_interaction):
    # Obtenir l'heure actuelle
    maintenant = datetime.now()
     # Calculer la diff√©rence entre maintenant et la derni√®re interaction
    difference = maintenant - last_interaction
    # Retourner True si la session a expir√©
    return difference > EXPIRATION_DUREE
    
# Fonction pour marquer l'utilisateur comme ayant √©t√© transf√©r√©
def marquer_comme_transfere(phone_number):
    conn = mysql.connector.connect(
        host='localhost',
        user='root',
        password='123456789',
        database='chatbot_db'
    )
    cursor = conn.cursor()
    cursor.execute(
        'UPDATE DEMANDE SET has_been_transferred = TRUE WHERE phone_number = %s ORDER BY id DESC LIMIT 1',
        (phone_number,)
    )
    conn.commit()
    cursor.close()
    conn.close()


# Fonction pour marquer un utilisateur comme √©tant avec un agent humain
def marquer_avec_agent(phone_number):
    conn = mysql.connector.connect(
        host='localhost',
        user='root',
        password='123456789',
        database='chatbot_db'
    )
    cursor = conn.cursor()
    cursor.execute(
        'UPDATE DEMANDE SET is_with_agent = TRUE WHERE phone_number = %s ORDER BY id DESC LIMIT 1',
        (phone_number,)
    )
    conn.commit()
    cursor.close()
    conn.close() 
    
# Fonction pour interroger le chatbot IA
    
def interroger_chatbot(DEMANDE):
    response = openai.Completion.create(
        engine="MyISAM",
        prompt=DEMANDE,
        max_tokens=150
    )
    return response.choices[0].text.strip()

def CustomChatGPT(user_input: str):
    messages.append({"role": "user", "content": user_input})
    response = openai.ChatCompletion.create(
        model = "gpt-3.5-turbo",
        messages = messages 
    ) 
    ChatGPT_reply = response["choices"][0]["message"]["content"]    
    return ChatGPT_reply

messages = [
    {"role":"system", "content": "Tu es un expert en service client ,tu repondras aux clients selon la langue utilis√©e, tu resteras dans le contexte de FanBusy ,tu repondras aux questions qui sont li√©es √† FanBusy. Si tu ne poss√®des pas de r√©ponse aux questions tu devras t'excuser aupr√®s du client en lui disant que tu es d√©sol√© mais tu n'as pas d'element de r√©ponse. Et si tu re√ßois des questions qui n'ont aucun rapport avec FanBusy tu diras aux clients que tu ne peux malheureusement pas r√©pondre car tu es un assistant virtuel de fanbusy et tu ne poss√®des que des informations concernant FanBusy.En tant que expert en service client pour une entreprise digitale, lors d'une conversation avec un utilisateur qui souhaite s'abonner √† un cr√©ateur de contenu sur FanBusy ou qui voudrais juste des informations sur FanBusy , FanBusy  est une plateforme innovante qui r√©sout le probl√®me de mon√©tisation du contenu pour les cr√©ateurs africains. Elle permet aux √©crivains, artistes, musiciens et influenceurs de transformer leur passion en source de revenus. Sur FanBusy, les cr√©ateurs proposent un contenu exclusif √† leurs abonn√©s via des abonnements mensuels, des chats priv√©s et des demandes personnalis√©es. Cela offre aux utilisateurs un acc√®s exclusif √† du contenu de qualit√© tout en soutenant directement leurs cr√©ateurs pr√©f√©r√©s , tu prendra en compte les etapes suivante pour mieux aider les clients Recherchez le Cr√©ateur : Utilisez la page de recherche (ic√¥ne üîç) pour d√©couvrir les cr√©ateurs inscrits sur FanBusy. Parcourez les profils et trouvez celui qui vous int√©resse. Visitez le Profil du Cr√©ateur :Rendez-vous sur le profil du cr√©ateur que vous souhaitez suivre.Cliquez sur S'abonner:Sur le profil du cr√©ateur, cliquez sur le bouton S'abonner. Vous serez automatiquement abonn√© et aurez acc√®s au contenu exclusif.Explorez les Avantages de Votre Abonnement :Profitez des avantages offerts par votre abonnement, tels que la visualisation du contenu flout√©, l'achat de MOD, et la possibilit√© d'√©changer avec le cr√©ateur via le chat.N'oubliez pas que les abonnements sont renouvelables automatiquement et sans engagement. Vous pouvez interrompre le renouvellement automatique √† tout moment avant la date d'anniversaire de l'achat"},
    {"role":"system","content":"Tu dois analyser les questions qui te sont pos√©es afin de trouver les pr√©occupations des utilisateurs , tu devras discuter de fa√ßon simple avec les utilisateurs .Tu dois √©viter les r√©dondances dans tes r√©ponses "},
]
 
# Fonction pour v√©rifier si l'utilisateur est insatisfait
def est_insatisfait(user_input: str):
    insatisfaction_keywords = ["je ne suis pas satisfait", "pas content", "je suis m√©content", "ce n'est pas ce que je voulais","non", "je ne suis pas satisfait"]
    for keyword in insatisfaction_keywords:
        if keyword.lower() in user_input.lower():
            return True
    return False

# Connexion √† la base de donn√©es
def get_db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='root',
        password='',
        database='chatbot_db'
    ) 

      
# Charger la session utilisateur
def charger_session(user_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute('SELECT * FROM session WHERE user_id = %s ORDER BY last_interaction DESC LIMIT 1', (user_id,))
    session_data = cursor.fetchone()

    if not session_data:
        # Si la session n'existe pas, en cr√©er une nouvelle
        session_data = {
            "session_id":str(uuid.uuid4()),
            'user_id': user_id,
            'request_count': 0,
            'with_agent': False,
            'last_interaction': datetime.now()
        }
        cursor.execute('INSERT INTO session (session_id,user_id,request_count,with_agent,last_interaction) VALUES (%s,%s,%s,%s,%s)', (str(uuid.uuid4()),user_id,0,False,session_data['last_interaction']))
        conn.commit()
    else:
        # V√©rifier si la session a expir√©
        last_interaction = session_data['last_interaction']
        if session_expiree(last_interaction):
            session_data = {
                "session_id":str(uuid.uuid4()),
                'user_id': user_id,
                'request_count': 0,
                'with_agent': False,
                'last_interaction': datetime.now()
            }
            cursor.execute('INSERT INTO session (session_id,user_id,request_count,with_agent,last_interaction) VALUES (%s,%s,%s,%s,%s)', (str(uuid.uuid4()),user_id,0,False,session_data['last_interaction']))
            conn.commit()
            
    cursor.close()
    conn.close()
    return session_data 
# Sauvegarder les informations de la session
def sauvegarder_session(session_data):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE session 
        SET request_count = %s, with_agent = %s, last_interaction =CURRENT_TIMESTAMP
        WHERE session_id = %s
    ''', (session_data['request_count'], session_data['with_agent'], session_data['session_id']))
    conn.commit()
    cursor.close()
    conn.close()
    
    # Fonction pour obtenir la liste des sessions actives et en attente d'un agent humain
def obtenir_sessions_en_attente():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    # R√©cup√©rer les sessions actives o√π l'utilisateur n'est pas encore avec un agent
    query = '''
    SELECT * FROM session 
    WHERE with_agent = FALSE AND TIMESTAMPDIFF(MINUTE, last_interaction, NOW()) <= %s
    '''
    cursor.execute(query, (EXPIRATION_DUREE.total_seconds() / 60,))
    sessions_en_attente = cursor.fetchall()
    cursor.close()
    conn.close()
    return sessions_en_attente
@app.route("/sessions_en_attente", methods=['POST'])
def lister_sessions_en_attente():
    sessions = obtenir_sessions_en_attente()
    return jsonify(sessions), 200

# Fonction pour obtenir la liste des sessions actives avec un agent humain
def obtenir_sessions_avec_agent():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    query = '''
    SELECT * FROM session 
    WHERE with_agent = TRUE
    '''
    cursor.execute(query)
    sessions_avec_agent = cursor.fetchall()
    cursor.close()
    conn.close()
    print(sessions_avec_agent) 
    return sessions_avec_agent
@app.route("/sessions_avec_agent", methods=['GET'])
def lister_sessions_avec_agent():
    sessions = obtenir_sessions_avec_agent()
    return jsonify(sessions),200 



@app.route("/", methods=['POST'])
def recevoir_DEMANDE():
    data = request.json
    utilisateur = data.get('utilisateur')
    DEMANDE = data.get('DEMANDE')
    
# Ajouter la demande et la r√©ponse √† la base de donn√©es
    ajouter_DEMANDE(utilisateur, DEMANDE)
    
    return jsonify({"message": "Demande re√ßue avec succ√®s", "reponse": "success"}), 200

@app.route("/demande", methods=['POST'])
def whatsapp_reply():
    print(request)
    incoming_msg = request.values.get('Body', '').strip()
    phone_number = request.values.get('From', '')
    response = MessagingResponse()
    message = response.message() 
    
    # Charger la session
    session_data = charger_session(phone_number)
    # V√©rifier si l'utilisateur est d√©j√† avec un agent humain
    if session_data['with_agent']:
      return jsonify({"message": "Vous √™tes d√©j√† en conversation avec un agent humain. Merci de patienter."}), 200
    # Incr√©menter le compteur de requ√™tes
    session_data['request_count'] += 1
    # Si le nombre de requ√™tes d√©passe un certain seuil, transf√©rer √† un agent humain
    if session_data['request_count'] >=10:
        session_data['with_agent'] = True
        message.body("Vous avez pos√© plusieurs questions. Je vais maintenant vous transf√©rer √† un agent humain qui pourra vous aider davantage.")
        sauvegarder_session(session_data)
        
        return str(response)   
    
    resp = CustomChatGPT(incoming_msg) 
    ajouter_DEMANDE(incoming_msg ,resp, phone_number)
    sauvegarder_session(session_data)  

    message.body(resp)   
    return str(response)
if __name__ == "__main__":
    app.run() 
    